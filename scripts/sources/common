##
# This is the file all (build and destroy) scripts have in 'common'.
#
# It loads the config, provides many helping functions and chooses which
# project-build script to include depending on the projects type (see bottom).
##

# Path to the python scripts directory.
S_PYTH="$DIRECTORY/py"

# Load config.
source "$DIRECTORY/config"

# Include prepare script.
source "$DIRECTORY/sources/prepare"

# Make sure drush temporary directory is writable.
chmod 777 /tmp/drush

##
# Reads a value from a .info/.info.yml file
#
# @param $1
#  Info filepath to read from.
# @param $2
#  Name of value to read.
s_info_file_get() {
  # Make sure info files are unix encoded before reading them.
  dos2unix -q "$1"
  # get the extension.
  local extension="${1##*.}"
  # Cut out the value.
  if [ "$extension" == "info" ]; then
    grep -m 1 "$2[ ]*=" "$1" | sed 's/^ *//g' | sed -n "s/$2[^=]*=[ ]*//p" | sed "s/[\"|\']//g"
  elif [ "$extension" == "yml" ]; then
    "$S_PYTH/read_yaml_info.py" "$1" "$2" | head -n 1
  fi
}

##
# Reads all values from a .info/.info.yml file.
#
# @param $1
#  Info filepath to read from.
# @param $2
#  Name of value to read.
s_info_file_get_all() {
  # Make sure info files are unix encoded before reading them.
  dos2unix -q "$1"
  # get the extension.
  local extension="${1##*.}"
  # Cut out the value.
  if [ "$extension" == "info" ]; then
    cat "$1" | grep "$2\[\][ ]*" | sed 's/^ *//g' | sed -n "s/$2[^=]*=[ ]*//p" | sed "s/[\"|\']//g"
  elif [ "$extension" == "yml" ]; then
    "$S_PYTH/read_yaml_info.py" "$1" "$2"
  fi
}

##
# Resets the owner and permission of the environment files.
#
# @param $1
#  The submission id.
s_reset_environment_files() {
  # Make sure PHP upload tempdir exists and is writeable.
  if [[ ! -d "/home/$S_ID/www/tmp" ]]; then
    mkdir "/home/$S_ID/www/tmp"
  fi
  chmod 777 "/home/$S_ID/www/tmp"
  # Make sure all files and directory have the correct group and user.
  chown --recursive $1 "/home/$1/www"/*
  chgrp --recursive nogroup "/home/$1/www"/*
}

##
# Clones/Fetches a project in project cache.
#
# @param $1
#  Project shortname to fetch.
# @param $2
#  Git url to clone from.
# @param $3
#  Path to download it to.
s_fetch_project() {
  # Clone if project is not in cache yet.
  if [[ ! -r "$S_DRUSHCACHE/$1.git" ]]; then
    timeout 500 git clone --mirror "$2" "$S_DRUSHCACHE/$1.git"
  fi
  timeout 350 git clone --reference "$S_DRUSHCACHE/$1.git" --recursive "$2" "$3" || s_ste 302
  # Update repo by fetching newest changes.
  cd "$3" || s_ste 302
  git fetch || s_ste 302
  git pull
}

##
# Execute a SQL query.
#
# @param $1
#  SQL query to execute.
s_sqlquery() {
  mysql -u $S_SQLUSR "-p$S_SQLPWD" -e "$1" || s_ste 303
}

##
# Setup temporary database.
#
# @param $1
#  Name of database and user to setup for.
s_db_setup() {
  s_sqlquery "#CREATE USER '$1'@'localhost' IDENTIFIED BY  '$1';"
  s_sqlquery "GRANT USAGE ON * . * TO  '$1'@'localhost' IDENTIFIED BY  '$1' WITH MAX_QUERIES_PER_HOUR 0 MAX_CONNECTIONS_PER_HOUR 0 MAX_UPDATES_PER_HOUR 0 MAX_USER_CONNECTIONS 0 ;"
  s_sqlquery "CREATE DATABASE IF NOT EXISTS $1 ;"
  s_sqlquery "GRANT ALL PRIVILEGES ON $1 . * TO  '$1'@'localhost';"
}

##
# Set a timeout to execute a command.
#
# @param $1
#  Command to execute.
# @param $2
#  Minutes until execution.
s_settimeout() {
  # Create an ´at´ job but give an extra minute to compensate time
  # differences with snippet script.
  echo "$1" | at now + $(($2 + 1)) minutes
}

##
# Checkout specified version of the main project and remove git.
#
# @param $1
#  Path to check the project out at.
# @param $2
#  Version to check out.
s_set_version() {
  cd $1
  # Try to checkout the version.
  timeout 350 git checkout $2 || s_ste 302

  # Apply any patches.
  for key in "${!S_PATCHES[@]}"
  do
    # Download the patch.
    timeout 120 wget "${S_PATCHES[$key]}" --output-document="/tmp/patch.$S_ID"
    # Try to apply the patch.
    git apply "/tmp/patch.$S_ID" || s_ste 304
    rm "/tmp/patch.$S_ID"
  done

  # Get rid of the git directory.
  rm -rf "$1/.git"
}

##
# Tries to find out the project real filename.
#
# This is necessary to compensate things like
# shortname: cck -> filename: content.
#
# @param $1
#  Path to the projects directory.
s_get_project_filename() {
  ls -l "$1" | grep -m 1 -o "[_a-zA-Z0-9]*.info.*$" | sed -n 's/.info.*//p'
}

##
# Tries to find out the core version of a project.
#
# @param $1
#  Path to the project's info file to determine core version of.
#
# @return
#  The core version determined.
s_get_project_coreversion() {
  s_info_file_get "$1" "core" | sed "s/\..*//g"
}

##
# Tries to find out the core version in docroot.
#
# @todo find a more reliable way to determine a core version.
#
# @return
#  The core version determined, or "X" for unknown.
s_get_coreversion() {
  # Check for Drupal 8.
  if [ -e "/home/$S_ID/www/core/install.php" ] # Core files were moved from root to core/.
  then
    echo "8"

  # Check for Drupal 7.
  elif [ -e "/home/$S_ID/www/authorize.php" ] # authorize.php for module ftp upload/installation was added.
  then
    echo "7"

  # Check for Drupal 6.
  elif [ -e "/home/$S_ID/www/misc/tabledrag.js" ] # Tabledrag was added.
  then
    echo "6"

  # Unknown version.
  else
    echo "X"
  fi
}

##
# Installs a drupal 8 core in docroot.
#
# @param $1
#  Core project version.
# @param $2
#  Install profile to use.
s_install_drupal_8() {
  # Setup directories and permissions.
  mkdir "/home/$S_ID/www/sites/default/files"
  mkdir "/home/$S_ID/www/sites/default/files/tmp"
  mkdir "/home/$S_ID/www/sites/default/files/translations"
  mkdir "/home/$S_ID/www/sites/simpletest"
  chmod --recursive 555 "/home/$S_ID/www"
  chmod --recursive 777 "/home/$S_ID/www/sites/default/files"
  chmod 777 "/home/$S_ID/www/sites/simpletest"
  chown --recursive $S_ID "/home/$S_ID/www"/* || s_ste 303
  chgrp --recursive nogroup "/home/$S_ID/www"/* || s_ste 303
  chown --recursive $S_ID "/home/$S_ID/www/.htaccess" || s_ste 303
  chgrp --recursive nogroup "/home/$S_ID/www/.htaccess" || s_ste 303
  # Drush's not ready for d8.
}

##
# Installs a drupal 7 core in docroot.
#
# @param $1
#  Core project version.
# @param $2
#  Install profile to use.
s_install_drupal_7() {
  # Setup directories and permissions.
  mkdir "/home/$S_ID/www/sites/default/files"
  mkdir "/home/$S_ID/www/sites/default/files/tmp"
  cp "/home/$S_ID/www/sites/default/default.settings.php" "/home/$S_ID/www/sites/default/settings.php" || s_ste 303
  chown --recursive $S_ID "/home/$S_ID/www"/*
  chgrp --recursive nogroup "/home/$S_ID/www"/*

  cd "/home/$S_ID/www" || s_ste 303

  # Start drupal installation.
  timeout 350 sudo -u $S_ID drush site-install $2 --locale=en -y --db-url=mysql://$S_ID:$S_ID@localhost/$S_ID --account-name=$S_DUSR --account-pass=$S_DPWD --account-mail="$S_ID-$S_DMAIL_SUFFIX" --site-mail="$S_ID-$S_DMAIL_SUFFIX" --site-name="Drupal $1" || s_ste 303

  # Set temporary path to files dir.
  timeout 350 sudo -u $S_ID drush vset --always-set file_temporary_path "sites/default/files/tmp"

  chmod --recursive 555 "/home/$S_ID/www"
  chmod --recursive 777 "/home/$S_ID/www/sites/default/files"
  chown --recursive $S_ID "/home/$S_ID/www"/* || s_ste 303
  chgrp --recursive nogroup "/home/$S_ID/www"/* || s_ste 303
  chown --recursive $S_ID "/home/$S_ID/www/.htaccess" || s_ste 303
  chgrp --recursive nogroup "/home/$S_ID/www/.htaccess" || s_ste 303
}

##
# Installs a drupal 6 core in docroot.
#
# @param $1
#  Core project version.
# @param $2
#  Install profile to use.
s_install_drupal_6() {
  mkdir "/home/$S_ID/www/sites/default/files"
  mkdir "/home/$S_ID/www/sites/default/files/tmp"
  cp "/home/$S_ID/www/sites/default/default.settings.php" "/home/$S_ID/www/sites/default/settings.php" || s_ste 303
  cd "/home/$S_ID/www" || s_ste 303
  chown --recursive $S_ID "/home/$S_ID/www"/*
  chgrp --recursive nogroup "/home/$S_ID/www"/*

  # Set mysql default settings for installation.
  echo "\$db_url = 'mysql://$S_ID:$S_ID@localhost/$S_ID';" >> "/home/$S_ID/www/sites/default/settings.php"
  # Start drupal installation.
  timeout 350 sudo -u $S_ID  drush site-install $2 --locale=en -y --db-url=mysql://$S_ID:$S_ID@localhost/$S_ID --account-name=$S_DUSR --account-pass=$S_DPWD --account-mail="$S_ID-$S_DMAIL_SUFFIX" --site-mail="$S_ID-$S_DMAIL_SUFFIX" --site-name="Drupal $1" || s_ste 303

  # Set temporary path to files dir.
  timeout 350 sudo -u $S_ID  drush vset --always-set file_directory_temp "sites/default/files/tmp"

  # Fixing PHP backwardcompatibility issue.
  sed -i 's/return call_user_func_array($function, $args);/return call_user_func_array($function, \&$args);/g' "/home/$S_ID/www/includes/module.inc"

  # Setup directories and permissions.
  chmod --recursive 555 "/home/$S_ID/www"
  chmod --recursive 777 "/home/$S_ID/www/sites/default/files"
  chown --recursive $S_ID "/home/$S_ID/www"/* || s_ste 303
  chgrp --recursive nogroup "/home/$S_ID/www"/* || s_ste 303
  chown --recursive $S_ID "/home/$S_ID/www/.htaccess" || s_ste 303
  chgrp --recursive nogroup "/home/$S_ID/www/.htaccess" || s_ste 303
}

##
# Installs a drupal core in docroot.
#
# @param $1
#  Major core version.
# @param $2
#  Used core version.
# @param $3 (Optional)
#  Installation profile.
s_install_drupal() {
  case "$1" in
    # Install a drupal 8 core.
    '8')
        if [[ -z "$3" ]]; then
          profile="standard"
        else
          profile=$3
        fi
        s_install_drupal_8 $2 $profile
        ;;
    # Install a drupal 7 core.
    '7')
        if [[ -z "$3" ]]; then
          profile="standard"
        else
          profile=$3
        fi
        s_install_drupal_7 $2 $profile
        ;;
    # Install a drupal 6 core.
    '6')
        if [[ -z "$3" ]]; then
          profile="default"
        else
          profile=$3
        fi
        s_install_drupal_6 $2 $profile
        ;;
    # Unknown version, do at least some basic setups.
    *)
        # Give crazy rights for crazy versions.
        chmod --recursive 777 "/home/$S_ID/www"
        chown --recursive $S_ID "/home/$S_ID/www"/*
        chgrp --recursive nogroup "/home/$S_ID/www"/*
  esac
}

##
# Installs a drupal module.
#
# @param $1
#  Path to the modules files.
# @param $2
#  Project file-shortname.
# @param $3
#  Major core version.
s_install_module() {
  case "$3" in
    '8')
        chown --recursive $S_ID "/home/$S_ID/www"/*
        chgrp --recursive nogroup "/home/$S_ID/www"/*
        ;;
    '7')
        chown --recursive $S_ID "/home/$S_ID/www"/*
        chgrp --recursive nogroup "/home/$S_ID/www"/*
        timeout 350 sudo -u $S_ID drush en $2 -y
        ;;
    '6')
        chown --recursive $S_ID "/home/$S_ID/www"/*
        chgrp --recursive nogroup "/home/$S_ID/www"/*
        timeout 350 sudo -u $S_ID drush en $2 -y
        ;;
    *)
        s_ste 301
  esac
}

##
# Installs a drupal theme.
#
# @param $1
#  Path to the theme files.
# @param $2
#  Project file-shortname.
# @param $3
#  Major core version.
s_install_theme() {
  case "$3" in
    '8')
        chown --recursive $S_ID "/home/$S_ID/www"/*
        chgrp --recursive nogroup "/home/$S_ID/www"/*
        ;;
    '7')
        chown --recursive $S_ID "/home/$S_ID/www"/*
        chgrp --recursive nogroup "/home/$S_ID/www"/*
        timeout 350 sudo -u $S_ID drush en $2 -y
        if [[ -n $(drush pm-list --pipe --status=enabled --no-core | grep "$2") ]]; then
          timeout 350 sudo -u $S_ID drush vset theme_default $2 --yes --always-set
        fi
        ;;
    '6')
        chown --recursive $S_ID "/home/$S_ID/www"/*
        chgrp --recursive nogroup "/home/$S_ID/www"/*
        timeout 350 sudo -u $S_ID drush en $2 -y
        if [[ -n $(drush pm-list --pipe --status=enabled --no-core | grep "$2") ]]; then
          timeout 350 sudo -u $S_ID drush vset theme_default $2 --yes --always-set
        fi
        ;;
    *)
        s_ste 301
  esac
}

##
# Add infobar script snippet to docroot, it'll be automatically appended by php.ini.
#
# @todo ugly php code within shell script - uuhhh.
s_addsnippet() {
  S_TIMESTAMP=$(date +%s)
  echo "<?php
    \$_SERVER['HTTPS'] = '$S_ENSURE_HTTPS';
    \$simplytest_snippet = array(
      'id' => \"$S_ID\",
      'created_timestamp' => $S_TIMESTAMP,
      'timeout' => $S_TIMEOUT,
      'admin_user' => \"$S_DUSR\",
      'admin_password' => \"$S_DPWD\",
      'mysql' => \"$S_ID\",
      'project' => \"$S_PROJECT\",
      'version' => \"$S_VERSION\",
      'mail_suffix' => \"$S_DMAIL_SUFFIX\",
    );
    ?>" >> "/home/$S_ID/www/snippet.php"
  cat "$DIRECTORY/snippet.php" >> "/home/$S_ID/www/snippet.php"
}

##
# Rewrites all .info/info.yml files in the specified directory.
#
# @param $1
#  Directory to rewrite all .info files from.
# @param $2
#  Version value to insert.
# @param $3
#  Project value to insert.
s_rewrite_info_files() {
  # Find all .info files within the path.
  local info_files=$(find "$1" -name '*.info')
  for info_file in $info_files; do
    echo "

; Information added by simplytest.me build script
version = \"$2\"
project = \"$3\"
" >> "$info_file"
  done

  # Find all .info.yml files within the path.
  local info_files=$(find "$1" -name '*.info.yml')
  for info_file in $info_files; do
    echo "

# Information added by simplytest.me build script
version: \"$2\"
project: \"$3\"
" >> "$info_file"
  done
}

##
# Reads all dependencies out of the specified .info file
#
# @param $1
#  Info file to read dependencies of.
s_read_dependencies() {
  s_info_file_get_all "$1" "dependencies"
  s_info_file_get_all "$1" "recommends"
  s_info_file_get_all "$1" "test_dependencies"
  s_info_file_get_all "$1" "simplytest_dependencies"
  s_info_file_get "$1" "base theme"
}

##
# Resolves all dependencies within the given path.
#
# @todo Version specific dependencies not fetched #1836012.
#
# @param $1
#  Root path, for searching resolved dependencies in.
# @param $2
#  Path to resolve dependencies for.
#
# For this function we need some static dependency container:
declare -A __RESOLVED_DEPENDENCIES
#
s_resolve_dependencies() {
  cd "$2"
  # Find all info files within the path.
  local info_files=$(find . -regex '.*\.info\(\.yml\)?')
  for info_file in $info_files; do
    # Read out dependencies (dependencies = "", base theme = "").
    local cur_dependencies=$(s_read_dependencies "$info_file")
    # Iterate through all dependencies.
    for cur_dependency in $cur_dependencies; do
      # 1. Make sure it's not empty, 2. Make sure it's not resolved yet, 3. Version definitions aren't modules.
      if [[ -n $cur_dependency && -z ${__RESOLVED_DEPENDENCIES[$cur_dependency]} && ${cur_dependency:0:1} != '(' ]]; then
        cd "$1"
        lg "$(basename $info_file) depends on \"$cur_dependency\""
        # Mark current dependency as resolved.
        __RESOLVED_DEPENDENCIES[$cur_dependency]="1"
        # Dependency is not already resolved? (prevent infinite recursion).
        if [[ -z $(find . -name "$cur_dependency.info*") ]]; then
          local cur_real_dependency=$cur_dependency
          local cur_recursive_dependency=$cur_dependency
          # Try to resolve dependency by project alias list (eg. content -> cck).
          if [[ -n ${__PROJECT_ALIASES[$cur_dependency]} ]]; then
            cur_dependency=${__PROJECT_ALIASES[$cur_dependency]}
          fi
          local result=$(timeout 350 drush dl --gitinfofile --pipe -y $cur_dependency)
          # If that failed, the dependency is still missing, try to guess and download the main module.
          # eg. entity_token -> doesn't exist ----> entity|_token -----> entity -> does exist!
          if [[ -z "$result" ]]; then
            cur_dependency=${cur_dependency%_*}
            local cur_recursive_dependency=$cur_dependency
            local result=$(timeout 350 drush dl --gitinfofile --pipe -y $cur_dependency)
          fi
          # If that succeeded, resolve dependencies of the dependency (recursion).
          if [[ -n "$result" ]]; then
            lg "-> Successfully resolved $cur_real_dependency (Project: $cur_dependency)."
            s_resolve_dependencies "$1" $(dirname $(find "$1" -name "$cur_recursive_dependency.info*" | sort | head -n 1))
          fi
        fi
        # Back to root dir.
        cd "$2"
      fi
    done
  done
}

##
# Installs all demo dependencies.
#
# Meaning, all modules that are specified in .info files
# as "simplytest_dependencies" for demostrational purposes.
#
# @param $1
#  Path to resolve dependencies for.
# @param $2
#  Drupal core version.
#
s_install_demo_modules() {
  cd "$1"
  # Find all info files within the path.
  local info_files=$(find . -regex '.*\.info\(\.yml\)?')
  for info_file in $info_files; do
    # Read out all simplytest_dependencies.
    local demo_dependencies=$(s_info_file_get_all "$info_file" "simplytest_dependencies")
    # Iterate through all demo dependencies.
    for cur_dependency in $demo_dependencies; do
      lg "Trying to install demo dependency \"$cur_dependency\""
      # Make sure it's not empty.
      if [[ -n $cur_dependency ]]; then
        # Install the demo dependency.
        case "$2" in
          '8')
              :
              ;;
          '7')
              timeout 350 sudo -u $S_ID drush en $cur_dependency -y
              ;;
          '6')
              timeout 350 sudo -u $S_ID drush en $cur_dependency -y
              ;;
          *)
              s_ste 301
        esac
      fi
    done
  done
}

##
# Downloads the submissions additional projects.
#
s_project_dl_additionals() {
  for key in "${!S_ADDITIONALS[@]}"
  do
    timeout 120 drush dl --gitinfofile --root="/home/$S_ID/www" -y "${S_ADDITIONALS[$key]}"
  done
}

##
# Tries to find a main info file within the given path.
#
# @param $1
#  Path to search within.
#
# @return
#  Relative path to the found info file.
s_discover_info_file() {
  find "$1" -regex '.*\.info\(\.yml\)?' | head -n 1
}

##
# Destructs the specified sandbox.
#
# @param $1
#  ID of the environment to destruct.
s_destruct() {
  # We don't want to set any states within destruction.
  s_ste() {
    :
  }

  if [ -z "$S_ID" ]; then
    echo "ABORTING - SUBMISSION ID IS NOT SET"
    exit 1
  fi

  # Disable vhost.
  lg "Disable vhost.."
  a2dissite $S_ID

  # Delete vhost.
  lg "Delete vhost.."
  rm -f "/etc/apache2/sites-available/$S_ID.conf"

  # Reload config.
  lg "Reload apache config.."
  service apache2 reload || service apache2 restart

  # Ensure: Delete vhost.
  rm -f "/etc/apache2/sites-enabled/$S_ID.conf"

  # Kill all the users processes.
  pkill -u $S_ID

  # Remove user.
  lg "Remove user.."
  userdel --force --remove $S_ID

  # Ensure: Remove the users home directory if it's still there.
  rm -Rf /home/$S_ID

  # Delete cgi wrapper.
  lg "Delete CGI wrapper.."
  rm -R /var/www/wrappers/$S_ID

  # Delete mysql user and database.
  lg "Cleanup database.."
  s_sqlquery "DROP USER '$S_ID'@'localhost';"
  s_sqlquery "DROP DATABASE $S_ID;"
}

##
# Logs a message to stdout.
#
# @param $1
#  Message to log.
lg() {
  echo "::: `date` :  $1"
}

##
# Sets a progress state on simplytest.me.
#
# @param $1
#  State to set.
#
#  Running submission states:
#   ENQUEUE           100
#   SPAWNED           101
#   PREPARE           102
#   DOWNLOAD          103
#   INSTALLING        104
#   FINALIZE          105
#   FINISHED          106
#  Terminated submission states.
#   TERMINATED        200
#   ABORTED           201
#   FAILED            202
#  Failure submission states.
#   ERROR_SERVER      300
#   ERROR_PREPARE     301
#   ERROR_DOWNLOAD    302
#   ERROR_INSTALLING  303
#   ERROR_PATCHING    304
s_ste() {
  # Set the new state by querying the site's callback.
  wget -qO /dev/null "$S_CALLBACK/$S_ID/$1"
  # Destroy and exit on error state.
  if [[ $1 -ge 300 ]]; then
     echo "FAILED ON STATE $1"
     s_destruct "$S_ID"
     # Before sending the terminated state, we need some time
     # to make sure the user was informed about the error state.
     # @todo figure out a better solution here, maybe better
     # error logging system
     sleep 30
     # Tell the server that a slot has become free.
     # By setting the submission to FAILED.
     wget -qO /dev/null "$S_CALLBACK/$S_ID/202"
     exit 1
  fi
}

# Figure out which type of project to set up and include the proper source.
case "$S_TYPE" in
  'Drupal core')
      lg "Building a drupal core project."
      source "$DIRECTORY/sources/type-drupal-core"
      ;;
  'Module')
      lg "Building a drupal module project."
      source "$DIRECTORY/sources/type-module"
      ;;
  'Theme')
      lg "Building a drupal theme project."
      source "$DIRECTORY/sources/type-theme"
      ;;
  'Distribution')
      lg "Building a drupal distribution project."
      source "$DIRECTORY/sources/type-distribution"
      ;;
esac
