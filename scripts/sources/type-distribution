##
# Setup for distributions.
#
# Available globals:
#  S_ID       Submission id.
#  S_GITURL   Project git url.
#  S_TYPE     Project type.
#  S_VERSION  Project version.
#  S_PROJECT  Project shortname.
##

##
# Download project.
s_project_download() {
  # Clone project into the user home temporarily.
  lg "Fetch distribution project.."
  s_fetch_project "$S_PROJECT" "$S_GITURL" "/home/$S_ID/$S_PROJECT"

  # Checkout specified version and remove .git.
  lg "Set project version.."
  s_set_version "/home/$S_ID/$S_PROJECT" $S_VERSION

  # Try to find out "real" project filename (eg, sandbox: 1234 -> filename: commerce_kickstart).
  lg "Finding out real project (file) name.."
  S_PROJECT_NAME=$(s_get_project_filename "/home/$S_ID/$S_PROJECT")
  if [[ -z $S_PROJECT_NAME ]]; then
    S_PROJECT_NAME=$S_PROJECT
  fi
  lg "-> projectfile name: $S_PROJECT_NAME"

  # Try to discover the main info file.
  S_INFO_FILE=$(s_discover_info_file "/home/$S_ID/$S_PROJECT")
  lg "-> discovered info file: $S_INFO_FILE"

  # Find out needed major core version.
  lg "Finding out needed major core version"
  S_CORE=$(s_get_project_coreversion "$S_INFO_FILE")
  lg "-> major core version: $S_CORE"
}

##
# Fetch project dependecies.
s_project_fetch_dependencies() {

  # We'll directly clone it into the www directory, so delete it for git.
  rm -rf "/home/$S_ID/www"

  # Check for build-*.make file (needed below).
  local build_make=$(ls -l "/home/$S_ID/$S_PROJECT" | grep -m 1 -o "build-*[_a-zA-Z0-9]*.make$")

  # Choose makefile.
  # simplytest.make ?
  if [[ -e "/home/$S_ID/$S_PROJECT/simplytest.make" ]]; then
    lg "-> Chosen makefile: simplytest.make"
    # Build site by makefile.
    timeout 500 drush make --force-complete --contrib-destination="profiles/$S_PROJECT_NAME" "/home/$S_ID/$S_PROJECT/simplytest.make" "/home/$S_ID/www" -y
    # Make sure the profile is available.
    if [[ ! -d "/home/$S_ID/www/profiles/$S_PROJECT_NAME" ]]; then
      rsync -r "/home/$S_ID/$S_PROJECT/" "/home/$S_ID/www/profiles/$S_PROJECT_NAME/"
    fi

  # build-*.make ?
  elif [[ -n $build_make ]]; then
    lg "-> Chosen makefile: $build_make"
    # Build site by makefile.
    timeout 500 drush make --force-complete --contrib-destination="profiles/$S_PROJECT_NAME" "/home/$S_ID/$S_PROJECT/$build_make" "/home/$S_ID/www" -y
    # Make sure the profile is available.
    if [[ ! -d "/home/$S_ID/www/profiles/$S_PROJECT_NAME" ]]; then
      rsync -r "/home/$S_ID/$S_PROJECT/" "/home/$S_ID/www/profiles/$S_PROJECT_NAME/"
    fi

  # drupal-org-core.make ?
  elif [[ -e "/home/$S_ID/$S_PROJECT/drupal-org-core.make" ]]; then
    lg "-> Chosen makefile: drupal-org-core.make"
    # If there's also a drupal-org.make file use it to resolve dependencies.
    if [[ -e "/home/$S_ID/$S_PROJECT/drupal-org.make" ]]; then
      echo "includes[] = drupal-org.make" >> "/home/$S_ID/$S_PROJECT/drupal-org-core.make"
    fi
    # Build site by makefile.
    timeout 500 drush make --force-complete --contrib-destination="profiles/$S_PROJECT_NAME" "/home/$S_ID/$S_PROJECT/drupal-org-core.make" "/home/$S_ID/www" -y
    # Move files to profiles folder.
    rsync -r "/home/$S_ID/$S_PROJECT/" "/home/$S_ID/www/profiles/$S_PROJECT_NAME/"
    # If no drupal-org.make file is available resolve dependencies manually.
    if [[ ! -e "/home/$S_ID/$S_PROJECT/drupal-org.make" ]]; then
      # Resolve missing dependencies.
      s_resolve_dependencies "/home/$S_ID/www" "/home/$S_ID/www/profiles/$S_PROJECT_NAME"
    fi

  # drupal-org.make ?
  elif [[ -e "/home/$S_ID/$S_PROJECT/drupal-org.make" ]]; then
    lg "-> Chosen makefile: drupal-org.make"
    # Make sure makefile is usable.
    echo "api = 2
      core = $S_CORE.x
      projects[drupal][type] = core" >> "/home/$S_ID/$S_PROJECT/drupal-org.make"
    # Build site by makefile.
    timeout 500 drush make --force-complete --contrib-destination="profiles/$S_PROJECT_NAME" "/home/$S_ID/$S_PROJECT/drupal-org.make" "/home/$S_ID/www" -y
    # Move files to profiles folder.
    rsync -r "/home/$S_ID/$S_PROJECT/" "/home/$S_ID/www/profiles/$S_PROJECT_NAME/"

  # No matching makefile ?
  else
    lg "Could not select any makefile."
    # Fetch drupal core. We'll directly clone it into the www directory, so delete it for git.
    rm -rf "/home/$S_ID/www"
    timeout 500 drush dl --destination="/home/$S_ID" --drupal-project-rename="www" --default-major="$S_CORE" "drupal-$S_CORE"
    # Move files to profiles folder.
    rsync -r "/home/$S_ID/$S_PROJECT/" "/home/$S_ID/www/profiles/$S_PROJECT_NAME/"
    # Resolve missing dependencies.
    s_resolve_dependencies "/home/$S_ID/www" "/home/$S_ID/www/profiles/$S_PROJECT_NAME"
  fi

  # Make sure a site could be build properly.
  if [[ ! -d "/home/$S_ID/www" ]]; then
    lg "Docroot www directory doesn't exist."
    s_ste 302
  fi
  if [[ -z $(ls "/home/$S_ID/www") ]]; then
    lg "Docroot is empty."
    s_ste 302
  fi
  if [[ ! -r "/home/$S_ID/www/index.php" ]]; then
    lg "No index.php found in docroot."
    s_ste 302
  fi

  # Make sure there's a files directory.
  if [[ ! -d "/home/$S_ID/www/sites/default/files" ]]; then
    mkdir "/home/$S_ID/www/sites/default/files"
    chmod 777 "/home/$S_ID/www/sites/default/files"
  fi
  # Make sure there's writable settings.php.
  if [[ ! -r "/home/$S_ID/www/sites/default/settings.php" ]]; then
    cp "/home/$S_ID/www/sites/default/default.settings.php" "/home/$S_ID/www/sites/default/settings.php"
    chmod 777 "/home/$S_ID/www/sites/default/settings.php"
  fi
}

##
# Install project.
s_project_install() {
  # Setup database.
  lg "Setup database.."
  s_db_setup $S_ID

  # Decide the PHP version to use based on the core version.
  if [ "$S_CORE" == "8" ]; then
    ln -s $S_PHP_DIR_5_5 /home/$S_ID/php
  else
    ln -s $S_PHP_DIR_5_3 /home/$S_ID/php
  fi

  # Write CGI wrapper (necessary for secure apache/cgi user change by suExec).
  mkdir /var/www/wrappers/$S_ID
  chown $S_ID /var/www/wrappers/$S_ID
  chgrp nogroup /var/www/wrappers/$S_ID
  echo "#!/bin/bash
    umask 022
    PHPRC=/home/$S_ID
    export PHPRC
    exec /home/$S_ID/php/php" > "/var/www/wrappers/$S_ID/php"
  chmod +x "/var/www/wrappers/$S_ID/php"
  chown $S_ID /var/www/wrappers/$S_ID/php
  chgrp nogroup /var/www/wrappers/$S_ID/php
}
