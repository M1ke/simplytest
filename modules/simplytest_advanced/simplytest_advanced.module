<?php

/**
 * @file
 * Provides an advanced submission launcher form.
 */

/**
 * Implements hook_menu().
 */
function simplytest_advanced_menu() {
  $items = array();
  // General settings page.
  $items['admin/simplytest/advanced'] = array(
    'title' => 'Advanced settings',
    'description' => 'Configuration for advanced submissions.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplytest_advanced_settings_form'),
    'access arguments' => array('administer simplytest'),
    'file' => 'simplytest_advanced.admin.inc',
  );
  // Autocomplete callback for modules and themes.
  $items['simplytest/additionals/autocomplete'] = array(
    'page callback' => 'simplytest_advanced_additionals_autcomplete',
    'access arguments' => array('simplytest advanced'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function simplytest_advanced_permission() {
  return array(
    'simplytest advanced' => array(
      'title' => t('Submit advanced submissions.'),
    ),
  );
}

/**
 * Implements hook_simplytest_submission_form().
 *
 * Builds the basic submission launcher form.
 */
function simplytest_advanced_simplytest_submission_form($form, $form_state) {
  // Check whether the user has permissions to make an advanced submission.
  if (!user_access('simplytest advanced')) {
    return;
  }

  // Get the maximum count of pathes and additional project a user may add.
  $patches = variable_get('simplytest_advanced_patch_count', 3);
  $additionals = variable_get('simplytest_advanced_additionals', 10);

  // The "Advanced options" submission fieldset.
  $form['submission']['advanced'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced options'),
    '#weight' => 500,
    '#collapsible' => TRUE,
    '#collapsed' => (empty($form_state['input']) ? TRUE : FALSE),
  );

  // Form elements for adding additional projects.
  $form['submission']['advanced']['additional_title'] = array(
    '#type' => 'item',
    '#title' => t('Add additional projects'),
    '#description' => t('Download additional modules and themes.'),
  );
  $form['submission']['advanced']['additionals'] = array(
    '#type' => 'container',
  );
  for ($additional = 0; $additional < $additionals; $additional++) {
    $form['submission']['advanced']['additionals']['additional'][$additional] = array(
      '#type' => 'textfield',
      '#attributes' => array(
        'class' => array('additionals-autocomplete'),
        'placeholder' => t('Theme or module shortname..'),
      ),
      '#size' => 40,
      '#parents' => array('submission', 'additionals', $additional),
    );
  }
  $form['submission']['advanced']['add_additional'] = array(
    '#type' => 'button',
    '#value' => t('Add an additional project'),
  );

  // Form elements for applying patches.
  $form['submission']['advanced']['patch_title'] = array(
    '#type' => 'item',
    '#title' => t('Apply patches'),
    '#description' => t('Apply patches on the chosen project.'),
  );
  $form['submission']['advanced']['patches'] = array(
    '#type' => 'container',
  );
  for ($patch = 0; $patch < $patches; $patch++) {
    $form['submission']['advanced']['patches']['patch'][$patch] = array(
      '#type' => 'textfield',
      '#parents' => array('submission', 'patches', $patch),
      '#attributes' => array(
        'placeholder' => variable_get('simplytest_advanced_patch_source', 'http://drupal.org/files/'),
      ),
    );
  }
  $form['submission']['advanced']['add_patch'] = array(
    '#type' => 'button',
    '#value' => t('Add a patch'),
  );

  $form['#validate'][] = 'simplytest_advanced_simplytest_submission_form_validate';
  return $form;
}

/**
 * Validation handler for the basic submission form.
 */
function simplytest_advanced_simplytest_submission_form_validate(&$form, &$form_state) {
  $additionals = &$form_state['values']['submission']['additionals'];
  $patches = &$form_state['values']['submission']['patches'];

  // Validate additionals.
  foreach ($additionals as $id => &$additional) {
    $additional = strtolower(trim($additional));

    // Remove empty fields.
    if (empty($additional)) {
      unset($additionals[$id]);
      continue;
    }

    $form_element_id = 'submission_additionals_' . $id;

    // Before we try to fetch anything, check whether this shortname is valid.
    if (preg_match('/[^a-z_\-0-9]/i', $additional)) {
      form_set_error($form_element_id, t('"%additional" is not a valid shortname of a module or theme.',
        array('%additional' => $additional)));
      continue;
    }

    // Check whether the project actually exists.
    $additional_data = simplytest_projects_get_project($additional);
    if ($additional_data === FALSE) {
      form_set_error($form_element_id, t('The "%additional" project could not be found.',
        array('%additional' => $additional)));
      continue;
    }

    // Check if the projects type is correct.
    if ($additional_data['type'] != 'Module' && $additional_data['type'] != 'Theme') {
      form_set_error($form_element_id, t('The "%additional" project is not a module or theme.',
        array('%additional' => $additional)));
      continue;
    }

  }

  // Validate patches.
  foreach ($patches as $id => &$patch) {
    $patch = trim($patch);

    // Remove empty fields.
    if (empty($patch)) {
      unset($patches[$id]);
      continue;
    }

    $form_element_id = 'submission_patches_' . $id;

    // Check if the patch has a valid url.
    if (!valid_url($patch, TRUE)) {
      form_set_error($form_element_id, t('The patch URL "%patch" is not valid.',
        array('%patch' => $patch)));
      continue;
    }

    // Get parts of the patch url and the allowed source url.
    $patch_url = parse_url($patch);
    $source_url = parse_url(variable_get('simplytest_advanced_patch_source', 'http://drupal.org/files/'));

    // Check if the patchs url is allowed.
    if (@$patch_url['host'] != $source_url['host']) {
      form_set_error($form_element_id, t('The patch URL must be from %source.',
        array('%source' => variable_get('simplytest_advanced_patch_source', 'http://drupal.org/files/'))));
      continue;
    }

    // Make a request to the patch url.
    $response = get_headers($patch, TRUE);
    // Get status code.
    $response_status = substr($response[0], 9, 3);

    // Check whether we got a good response status.
    if ($response_status != 200 && $response_status != 301 && $response_status != 304) {
      form_set_error($form_element_id, t('The patch URL "%patch" failed by HTTP status %status.', array(
        '%patch' => $patch,
        '%status' => $response_status,
      )));
      continue;
    }
    // Check whether we got a text/plain Content-Type.
    if (isset($response['Content-Type']) && strpos($response['Content-Type'], 'text/plain') === FALSE) {
      form_set_error($form_element_id, t('The patch URL "%patch" failed by invalid Content-Type status %content_type.', array(
        '%patch' => $patch,
        '%content_type' => $response['Content-Type'],
      )));
      continue;
    }

  }
}

/**
 * Autocomplete for additional project textfields.
 */
function simplytest_advanced_additionals_autcomplete() {
  $matches = array();
  if (isset($_GET['string']) && ($string = $_GET['string'])) {
    $types = array('Module', 'Theme');
    // Search for projects and create option list.
    foreach (simplytest_projects_search_project($string, 50, $types) as $project) {
      $label = '';
      // Cut long "shortnames".
      if (strlen($project->title) > 35) {
        $project->title = substr($project->title, 0, 32) . '...';
      }
      $label = '<strong>' . check_plain($project->title) . '</strong>';
      if ($project->sandbox) {
        // Make sandbox project items themeable (to highlight them).
        $label = '<span class="sandbox-project">' . $label. '</span>';
        $project->type = 'Sandbox ' . $project->type;
      }
      if (isset($project->type)) {
        $label .= '<span class="project-type">' . check_plain($project->type) . '</span>';
      }
      $matches[] = (object) array(
        'label' => $label,
        'shortname' => $project->shortname,
      );
    }
  }
  drupal_json_output($matches);
}
