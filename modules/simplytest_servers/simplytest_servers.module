<?php

/**
 * @file
 * Worker server management.
 */

/**
 * Implements hook_menu().
 */
function simplytest_servers_menu() {
  $items = array();
  // Server configuration overview.
  $items['admin/simplytest/servers'] = array(
    'title' => 'Servers',
    'description' => 'Server settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplytest_servers_overview_form'),
    'access arguments' => array('administer simplytest'),
    'file' => 'simplytest_servers.admin.inc',
  );
  // Server configuration; Add new server.
  $items['admin/simplytest/servers/add'] = array(
    'title' => 'Add server',
    'description' => 'Adds a new server.',
    'type' => MENU_LOCAL_ACTION,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplytest_servers_config_form', NULL),
    'access arguments' => array('administer simplytest'),
    'file' => 'simplytest_servers.admin.inc',
  );
  // Server configuration; Edit a server.
  $items['admin/simplytest/servers/%/edit'] = array(
    'title' => 'Edit server',
    'description' => 'Edit server configuration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplytest_servers_config_form', 3),
    'access arguments' => array('administer simplytest'),
    'file' => 'simplytest_servers.admin.inc',
  );
  // Server configuration; Operate on a server.
  $items['admin/simplytest/servers/%/%'] = array(
    'title' => 'Confirm operation',
    'description' => 'Confirm operation',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplytest_servers_operation', 3, 4),
    'access arguments' => array('administer simplytest'),
    'file' => 'simplytest_servers.admin.inc',
  );
  return $items;
}

/**
 * Returns an assocciative array of server information.
 */
function simplytest_servers_get() {
  // Get all configured servers.
  $servers = variable_get('simplytest_servers', array());
  // Get an ordered list of server id's and their full slots.
  $server_slots = simplytest_submission_get_full_server_slots();
  // Put the current slot states in.
  foreach ($servers as &$server) {
    // Count of filled slots.
    $server['fullslots'] = isset($server_slots[$server['id']]) ? $server_slots[$server['id']] : 0;
    // Count of free slots.
    $server['freeslots'] = (($server['slots'] > $server['fullslots']) ? $server['slots'] - $server['fullslots'] : 0);
  }
  return $servers;
}

/**
 * Saves an assocciative array of server information.
 */
function simplytest_servers_set($servers) {
  return variable_set('simplytest_servers', $servers);
}

/**
 * Returns the hostname for a specific server id.
 *
 * @param string $id
 *  The server id.
 *
 * @return string
 *  The servers host name.
 */
function simplytest_servers_get_hostname($id) {
  $servers = simplytest_servers_get();
  return isset($servers[$id]['host']) ? $servers[$id]['host'] : FALSE;
}

/**
 * Spawn a submission worker on one of the servers.
 *
 * @param array $submission
 *  An array of submission data.
 *
 * @return array
 *  An associative array of data of the chosen server.
 */
function simplytest_servers_spawn($submission) {
  $servers = simplytest_servers_get();

  // Order the servers according to their free slots.
  // Don't make use of full or inactive servers.
  uasort($servers, 'simplytest_servers_sort_by_free_slots_desc');
  foreach ($servers as $id => $server) {
    if ($server['freeslots'] == 0 || !$server['active']) {
      unset($servers[$id]);
    }
  }

  if (empty($servers)) {
    watchdog('simplytest_servers', 'Failed to choose servers. No active servers with free slots available.', array(), WATCHDOG_ERROR);
    return FALSE;
  }

  foreach ($servers as $server) {
    // Format arguments and data for worker script.
    $args = explode(',', 'id,host,giturl,type,version,timeout,project');
    $sub = array();
    foreach ($args as $arg) {
      if (isset($server[$arg])) {
        $sub[] = escapeshellarg($server[$arg]);
      }
      if (isset($submission[$arg])) {
        $sub[] = escapeshellarg($submission[$arg]);
      }
    }

    $commands = array(
      // Spawnscript with arguments.
      $server['spawn'] . ' ' . implode(' ', $sub),
    );

    // Execute spawn script.
    if (!simplytest_servers_execute($server, $commands)) {
      continue;
    }

    watchdog('simplytest_servers', 'Spawned job on %host by SSH2 with user %user (Server: %name): $%cmd', array(
      '%host' => $server['host'],
      '%name' => $server['name'],
      '%user' => $server['user'],
      '%cmd' => implode(', ', $commands),
    ), WATCHDOG_NOTICE);
    
    return $server;
  }

  watchdog('simplytest_servers', 'Failed to spawn a job on any servers.', array(), WATCHDOG_ERROR);
  return FALSE;
}

/**
 * Executes a command on a specific server.
 *
 * @param object $server
 *  A simplytest server object.
 * @param array $commands
 *  An array of command string to execute.
 *
 * @return bool
 *  Whether the command could be executed.
 */
function simplytest_servers_execute($server, $commands) {
  // Try to connect to server.
  $connection = ssh2_connect($server['host'], $server['port']);
  if ($connection === FALSE) {
    watchdog('simplytest_servers', 'Failed to connect to %host by SSH2 (Server: %name).', array(
      '%host' => $server['host'],
      '%name' => $server['name'],
    ), WATCHDOG_ERROR);
    return FALSE;
  }

  // Try to  authenticate.
  if(!ssh2_auth_password($connection, $server['user'], $server['password'])) {
    watchdog('simplytest_servers', 'Failed to authenticate to %host by SSH2 with user %user (Server: %name).', array(
      '%host' => $server['host'],
      '%name' => $server['name'],
      '%user' => $server['user'],
    ), WATCHDOG_ERROR);
    return FALSE;
  }

  // Try to exec each command.
  foreach ($commands as $command) {
    $stream = ssh2_exec($connection, escapeshellcmd($command));
    if ($stream === FALSE) {
      watchdog('simplytest_servers', 'Failed to execute command on %host by SSH2 with user %user (Server: %name): $%cmd', array(
        '%host' => $server['host'],
        '%name' => $server['name'],
        '%user' => $server['user'],
        '%cmd' => $command,
      ), WATCHDOG_ERROR);
      return FALSE;
    }
    fclose($stream);
  }

  // Finish connection.
  $stream = ssh2_exec($connection, 'exit');
  fclose($stream);
  $connection = NULL;

  return TRUE;
}

/**
 * Sorting callback.
 *
 * Sorts an array of servers by free slots, ordered descending.
 */
function simplytest_servers_sort_by_free_slots_desc($a, $b) {
  return ($b['freeslots'] - $a['freeslots']);
}