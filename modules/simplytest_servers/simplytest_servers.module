<?php

/**
 * @file
 * Worker server management.
 */

/**
 * Submission config file upload target path.
 */
define('SIMPLYTEST_SERVERS_CONFIG_FILE_PATH', '/tmp');

/**
 * Server submission config data mapping.
 *
 * @return array
 *  An associative array describing the mapping between the sites
 *  submission data and the servers configuration.
 */
function simplytest_servers_config_data_map() {
  $map = array(
    'S_ID'            => 'submission:id',
    'S_HOST'          => 'server:host',
    'S_PROJECT'       => 'submission:project',
    'S_TYPE'          => 'submission:type',
    'S_VERSION'       => 'submission:version',
    'S_GITURL'        => 'submission:giturl',
    'S_TIMEOUT'       => 'submission:timeout',
    'S_ADDITIONALS'   => 'submission:additionals',
    'S_PATCHES'       => 'submission:patches',
  );
  // Let other modules alter the config map.
  drupal_alter('simplytest_servers_config_data_map', $map);
  return $map;
}

/**
 * Implements hook_menu().
 */
function simplytest_servers_menu() {
  $items = array();
  // Server configuration overview.
  $items['admin/simplytest/servers'] = array(
    'title' => 'Servers',
    'description' => 'Server settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplytest_servers_overview_form'),
    'access arguments' => array('administer simplytest'),
    'file' => 'simplytest_servers.admin.inc',
  );
  // Server configuration; Add new server.
  $items['admin/simplytest/servers/add'] = array(
    'title' => 'Add server',
    'description' => 'Adds a new server.',
    'type' => MENU_LOCAL_ACTION,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplytest_servers_config_form', NULL),
    'access arguments' => array('administer simplytest'),
    'file' => 'simplytest_servers.admin.inc',
  );
  // Server configuration; Edit a server.
  $items['admin/simplytest/servers/%/edit'] = array(
    'title' => 'Edit server',
    'description' => 'Edit server configuration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplytest_servers_config_form', 3),
    'access arguments' => array('administer simplytest'),
    'file' => 'simplytest_servers.admin.inc',
  );
  // Server configuration; Operate on a server.
  $items['admin/simplytest/servers/%/%'] = array(
    'title' => 'Confirm operation',
    'description' => 'Confirm operation',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplytest_servers_operation', 3, 4),
    'access arguments' => array('administer simplytest'),
    'file' => 'simplytest_servers.admin.inc',
  );
  return $items;
}

/**
 * Returns an assocciative array of server information.
 */
function simplytest_servers_get() {
  // Get all configured servers.
  $servers = variable_get('simplytest_servers', array());
  // Get an ordered list of server id's and their full slots.
  $server_slots = simplytest_submission_get_full_server_slots();
  // Put the current slot states in.
  foreach ($servers as &$server) {
    // Count of filled slots.
    $server['fullslots'] = isset($server_slots[$server['id']]) ? $server_slots[$server['id']] : 0;
    // Count of free slots.
    $server['freeslots'] = (($server['slots'] > $server['fullslots']) ? $server['slots'] - $server['fullslots'] : 0);
  }
  return $servers;
}

/**
 * Saves an assocciative array of server information.
 */
function simplytest_servers_set($servers) {
  return variable_set('simplytest_servers', $servers);
}

/**
 * Returns the hostname for a specific server id.
 *
 * @param string $id
 *  The server id.
 *
 * @return string
 *  The servers host name.
 */
function simplytest_servers_get_hostname($id) {
  $servers = simplytest_servers_get();
  return isset($servers[$id]['host']) ? $servers[$id]['host'] : FALSE;
}

/**
 * Spawn a submission worker on one of the servers.
 *
 * @param array $submission
 *  An array of submission data.
 *
 * @return array
 *  An associative array of data of the chosen server.
 */
function simplytest_servers_spawn($submission) {
  $servers = simplytest_servers_get();

  // Order the servers according to their free slots.
  // Don't make use of full or inactive servers.
  uasort($servers, 'simplytest_servers_sort_by_free_slots_desc');
  foreach ($servers as $id => $server) {
    if ($server['freeslots'] == 0 || !$server['active']) {
      unset($servers[$id]);
    }
  }

  if (empty($servers)) {
    watchdog('simplytest_servers', 'Failed to choose servers. No active servers with free slots available.', array(), WATCHDOG_ERROR);
    return FALSE;
  }

  foreach ($servers as $server) {
    // Generate submission config file contents.
    $submission_config = simplytest_servers_submission_config_file_generate(array(
      'submission' => $submission,
      'server' => $server,
    ));

    // Target submission config filepath.
    $config_path = SIMPLYTEST_SERVERS_CONFIG_FILE_PATH . '/' . $submission['id'] . '.submission';
dsm($submission_config);return;
    // Shell script commands.
    $commands = array(
      // Save the submission configuration file.
      array('echo %configuration_string > %configuration_path', array(
        '%configuration_string' => $submission_config,
        '%configuration_path' => $config_path,
      )),
      // Execute the spawn script.
      array($server['spawn'] . ' %configuration_path', array(
        '%configuration_path' => $config_path,
      )),
    );

    // Execute spawn script.
    if (!simplytest_servers_execute($server, $commands)) {
      continue;
    }

    watchdog('simplytest_servers', 'Spawned %id on %host by SSH2 with user %user (Server: %id).', array(
      '%id' => $submission['id'],
      '%host' => $server['host'],
      '%name' => $server['id'],
      '%user' => $server['user'],
    ), WATCHDOG_NOTICE);

    return $server;
  }

  watchdog('simplytest_servers', 'Failed to spawn %id on any servers.', array(
    '%id' => $submission['id'],
  ), WATCHDOG_ERROR);
  return FALSE;
}

/**
 * Sorting callback.
 *
 * Sorts an array of servers by free slots, ordered descending.
 */
function simplytest_servers_sort_by_free_slots_desc($a, $b) {
  return ($b['freeslots'] - $a['freeslots']);
}

/**
 * Generates the submission config file content for given data.
 *
 * @param array $data
 *  Associative array containing necessary server submission
 *  data to map for creatign the submission config file.
 *
 * @param string
 *  The submission config file content.
 */
function simplytest_servers_submission_config_file_generate($data) {
  $map = simplytest_servers_config_data_map();
  $config = array();

  // Map submission data to server submission configuration.
  foreach ($map as $target => $source) {
    // Find necessary value for this mapping.
    $source_path = explode(':', $source);
    $value = &$data;
    foreach ($source_path as $path_part) {
      if (isset($value[$path_part])) {
        $value = &$value[$path_part];
      }
      else {
        // If the value could not be found for the given
        // mapping, jump over this config setting.
        continue 2;
      }
    }
    $config[$target] = $value;
  }

  // Generate config file content for bashscript shells.
  return simplytest_server_submission_config_file_bashscript($config);
}

/**
 * Generates the server submission config file contents for bash.
 *
 * @param array $config
 *  An associative array containing mapped configuration data.
 *
 * @return string
 *  A string of shell commands for setting the configuration variables.
 */
function simplytest_server_submission_config_file_bashscript($config) {
  $config_content = '';
  foreach ($config as $key => $value) {
    // Build value setting shell commands depending on datatype.
    if (is_array($value)) {
      $config_content .= "declare -A " .  escapeshellarg(trim($key)) . ";\n";
      foreach ($value as $k => $v) {
        $config_content .= $key . "[" . escapeshellarg(trim($k)) . "]=" .  escapeshellarg(trim($v)) . ";\n";
      }
    }
    elseif (is_string($value)) {
      $config_content .= $key . "=" .  escapeshellarg(trim($value)) . ";\n";
    }
  }
  return $config_content;
}

/**
 * Executes a command on a specific server.
 *
 * @param array $server
 *  A simplytest array object.
 * @param array $commands
 *  An array of command strings to execute.
 *
 * @return bool
 *  Whether the command could be executed.
 */
function simplytest_servers_execute($server, $commands) {
  // Try to connect to server.
  $connection = ssh2_connect($server['host'], $server['port']);
  if ($connection === FALSE) {
    watchdog('simplytest_servers', 'Failed to connect to %host by SSH2 (Server: %name).', array(
      '%host' => $server['host'],
      '%name' => $server['name'],
    ), WATCHDOG_ERROR);
    return FALSE;
  }

  // Try to  authenticate.
  if(!ssh2_auth_password($connection, $server['user'], $server['password'])) {
    watchdog('simplytest_servers', 'Failed to authenticate to %host by SSH2 with user %user (Server: %name).', array(
      '%host' => $server['host'],
      '%name' => $server['name'],
      '%user' => $server['user'],
    ), WATCHDOG_ERROR);
    return FALSE;
  }

  // Try to exec each command.
  foreach ($commands as $command) {
    $escaped_command = simplytest_servers_format_command($command[0], $command[1]);
    $stream = ssh2_exec($connection, $escaped_command);
    if ($stream === FALSE) {
      watchdog('simplytest_servers', 'Failed to execute command on %host by SSH2 with user %user (Server: %name): $%cmd', array(
        '%host' => $server['host'],
        '%name' => $server['name'],
        '%user' => $server['user'],
        '%cmd' => $escaped_command,
      ), WATCHDOG_ERROR);
      return FALSE;
    }
    fclose($stream);
  }

  // Finish connection.
  $stream = ssh2_exec($connection, 'exit');
  fclose($stream);
  $connection = NULL;

  return TRUE;
}

/**
 * Escapes a command strings arguments.
 *
 * @param string $command
 *  The command string with %placeholders for arguments.
 * @param array $args
 *  An associative array keyed by %placeholder name and the
 *  argument value itsself to escape in the command.
 *
 * @return string
 *  The command with escaped arguments.
 */
function simplytest_servers_format_command($command, array $args = array()) {
  // Transform arguments before inserting them.
  foreach ($args as $key => $value) {
    $args[$key] = escapeshellarg($value);
  }
  return strtr($command, $args);
}