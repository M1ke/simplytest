<?php

/**
 * @file
 * Submission management functionality.
 */

/**
 * Running submission states.
 */
define('SIMPLYTEST_SUBMISSIONS_ENQUEUE',          100);
define('SIMPLYTEST_SUBMISSIONS_SPAWNED',          101);
define('SIMPLYTEST_SUBMISSIONS_PREPARE',          102);
define('SIMPLYTEST_SUBMISSIONS_DOWNLOAD',         103);
define('SIMPLYTEST_SUBMISSIONS_INSTALLING',       104);
define('SIMPLYTEST_SUBMISSIONS_FINALIZE',         105);
define('SIMPLYTEST_SUBMISSIONS_FINISHED',         106);

/**
 * Terminated submission states.
 */
define('SIMPLYTEST_SUBMISSIONS_TERMINATED',       200);
define('SIMPLYTEST_SUBMISSIONS_ABORTED',          201);
define('SIMPLYTEST_SUBMISSIONS_FAILED',           202);

/**
 * Failure submission states.
 */
define('SIMPLYTEST_SUBMISSIONS_ERROR_SERVER',     300);
define('SIMPLYTEST_SUBMISSIONS_ERROR_PREPARE',    301);
define('SIMPLYTEST_SUBMISSIONS_ERROR_DOWNLOAD',   302);
define('SIMPLYTEST_SUBMISSIONS_ERROR_INSTALLING', 303);
define('SIMPLYTEST_SUBMISSIONS_ERROR_PATCHING',   304);

/**
 * Implements hook_menu().
 */
function simplytest_submissions_menu() {
  $items = array();
  // Configuration form.
  $items['admin/simplytest/submission'] = array(
    'title' => 'Submission settings',
    'description' => 'Submission settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplytest_submissions_config_form'),
    'access arguments' => array('administer simplytest'),
    'file' => 'simplytest_submissions.admin.inc',
  );
  // Submission monitor.
  $items['admin/simplytest/submissions/monitor'] = array(
    'title' => 'Submission monitor',
    'description' => 'Submission monitor',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplytest_submissions_monitor'),
    'access arguments' => array('administer simplytest'),
    'file' => 'simplytest_submissions.admin.inc',
  );
  // Shows a submissions details.
  $items['admin/simplytest/submissions/%'] = array(
    'title' => 'Submission detail',
    'page callback' => 'simplytest_submissions_view',
    'page arguments' => array(3),
    'access arguments' => array('administer simplytest'),
    'file' => 'simplytest_submissions.admin.inc',
  );
  // State update callback.
  $items['simplytest/submissions/state/%/%'] = array(
    'page callback' => 'simplytest_submissions_set_state',
    'access callback' => 'simplytest_submissions_callback_access',
    'page arguments' => array(3, 4),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Enqueues a new submission for processing.
 *
 * @param array $submission
 *  An associative array containing various submission data.
 *  Must at least contain the following:
 *  - project: The main project shortname for the submission.
 *  - version: The version to checkout for the main project.
 */
function simplytest_submissions_enqueue($submission) {
  global $user;

  // Get available project information.
  $submission += simplytest_projects_get_project($submission['project']);
  if (!$submission) {
    return FALSE;
  }

  // Generate unique submission id.
  $submission['id'] = simplytest_submissions_generate_id();

  // Determine the submission timeout to use.
  $submission['timeout'] = variable_get('simplytest_submissions_timeout', 15);
  foreach ($user->roles as $rid => $role) {
    // Select highest timeout setting.
    $role_timeout = variable_get('simplytest_submissions_timeout_' . $rid, 0);
    if ($role_timeout > $submission['timeout']) {
      $submission['timeout'] = $role_timeout;
    }
  }

  // Enqueue submission.
  db_insert('simplytest_submissions')
    ->fields(array(
      'id' => $submission['id'],
      'ip' => ip_address(),
      'data' => serialize($submission),
      'timestamp' => REQUEST_TIME,
      'state' => SIMPLYTEST_SUBMISSIONS_ENQUEUE,
    ))
    ->execute();

  return $submission['id'];
}

/**
 * Returns the current state of a submission.
 *
 * @param string $id
 *  The submission id.
 *
 * @return int
 *  Submission state.
 */
function simplytest_submissions_get_state($id) {
  return db_select('simplytest_submissions', 'p')
    ->fields('p', array('state'))
    ->condition('id', $id)
    ->execute()->fetchField();
}

/**
 * Returns the current position in the submission queue.
 *
 * @param string $id
 *  The submission id.
 *
 * @return int
 *  Submission position.
 */
function simplytest_submissions_get_position($id) {
  $position = &drupal_static(__FUNCTION__);
  if (!isset($position)) {
    // Mark timed out submissions as aborted.
    db_update('simplytest_submissions')
      ->fields(array('state' => SIMPLYTEST_SUBMISSIONS_ABORTED))
      ->condition('state', SIMPLYTEST_SUBMISSIONS_ENQUEUE)
      ->condition('timestamp', REQUEST_TIME - 10, '<')
      ->execute();
    // Figure out current position of this submission.
    $position = db_query('SELECT count(*) FROM {simplytest_submissions} WHERE '
      . 'number < (SELECT number FROM {simplytest_submissions} WHERE id = :id) && '
      . 'state = :state',
      array(':id' => $id, ':state' => SIMPLYTEST_SUBMISSIONS_ENQUEUE))->fetchField();
  }
  return $position;
}

/**
 * Processes the given submission.
 *
 * @param string $id
 *  The submission id.
 */
function simplytest_submissions_process_submission($id) {
  switch (simplytest_submissions_get_state($id)) {
    // Submission is enqueued.
    case SIMPLYTEST_SUBMISSIONS_ENQUEUE:
      if (simplytest_submissions_get_position($id) == 0) {
        // Send submission to a worker server if it's its turn.
        simplytest_submissions_send($id);
      }
      // Update timestamp to mark this submission as active.
      db_update('simplytest_submissions')
        ->fields(array('timestamp' => REQUEST_TIME))
        ->condition('id', $id)
        ->execute();
      break;
  }
}

/**
 * Sends a submission to a worker server.
 *
 * @param string $id
 *  The submission id.
 */
function simplytest_submissions_send($id) {
  $submission = db_select('simplytest_submissions', 's')
    ->fields('s', array('data'))
    ->condition('id', $id)
    ->execute()->fetchField();
  // Send submission and spawn worker.
  $server = simplytest_servers_spawn(unserialize($submission));
  if ($server === FALSE) {
    // Something went very wrong, sending submission failed.
    return FALSE;
  }
  else {
    // Submission has been spawned, set submission state properly.
    simplytest_submissions_set_state($id, SIMPLYTEST_SUBMISSIONS_SPAWNED);
    // Also save the servers id for the current submission.
    db_update('simplytest_submissions')
      ->fields(array('server' => $server['id']))
      ->condition('id', $id)
      ->execute();
    return TRUE;
  }
}

/**
 * Redirects to the final sandbox url.
 *
 * @param string $id
 *  The submission id.
 */
function simplytest_submissions_goto($id) {
  // Get server id of the submission.
  $server = db_select('simplytest_submissions', 'p')
    ->fields('p', array('server'))
    ->condition('id', $id)
    ->execute()->fetchField();
  // Get the servers hostname.
  $host = simplytest_servers_get_hostname($server);
  // Build the servers URL.
  $url = 'http://' . $id . '.' . $host;
  // Redirect.
  if (!empty($url)) {
    drupal_goto($url, array('external' => TRUE), 307);
  }
}

/**
 * Submission state callback access check.
 *
 * This resolves all IP's of the known servers hostnames and
 * checks whether the request came from one of them.
 */
function simplytest_submissions_callback_access() {
  $servers = simplytest_servers_get();
  $ip_address = ip_address();
  foreach ($servers as $server) {
    if ($server['active'] && gethostbyname($server['host']) == $ip_address) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Sets the state of a submission.
 *
 * @param string $id
 *  The submission id.
 * @param int $state
 *  The submissions state to set.
 */
function simplytest_submissions_set_state($id, $state) {
  // Update the submission state.
  db_update('simplytest_submissions')
    ->fields(array('state' => $state))
    ->condition('id', $id)
    ->execute();

  // Log the submission state update.
  _simplytest_submissions_state_log($id, $state);
}

/**
 * Generates a random, unique submission id.
 *
 * @return string
 *  A 16 characters long random string, beginning with 's'
 *  containing characters of a-z 0-9. These specifications
 *  are because of unix and mysql username compatibility.
 */
function simplytest_submissions_generate_id() {
  do {
    $id = 's' . substr(md5(uniqid()), 0, 15);
  } while (simplytest_submissions_get_state($id) !== FALSE);
  return $id;
}

/**
 * Returns a human readable string for a submission state.
 *
 * @param int $state
 *  The submissions state to set.
 */
function simplytest_submissions_state_to_string($state) {
  $states = simplytest_submissions_states();
  return isset($states[$state]) ? $states[$state] : t('Unknown');
}

/**
 * Returns an array of all submission states, keyed by state number
 * containing the human readable string.
 */
function simplytest_submissions_states() {
  $states = array(
    // Running submission states.
    SIMPLYTEST_SUBMISSIONS_ENQUEUE          => t('Enqueued'),
    SIMPLYTEST_SUBMISSIONS_SPAWNED          => t('Spawned'),
    SIMPLYTEST_SUBMISSIONS_PREPARE          => t('Preparing'),
    SIMPLYTEST_SUBMISSIONS_DOWNLOAD         => t('Downloading'),
    SIMPLYTEST_SUBMISSIONS_INSTALLING       => t('Installing'),
    SIMPLYTEST_SUBMISSIONS_FINALIZE         => t('Finalizing'),
    SIMPLYTEST_SUBMISSIONS_FINISHED         => t('Finished'),
    // Terminated submission states.
    SIMPLYTEST_SUBMISSIONS_TERMINATED       => t('Terminated'),
    SIMPLYTEST_SUBMISSIONS_ABORTED          => t('Aborted'),
    SIMPLYTEST_SUBMISSIONS_FAILED           => t('Failed'),
    // Failure submission states.
    SIMPLYTEST_SUBMISSIONS_ERROR_SERVER     => t('Error server'),
    SIMPLYTEST_SUBMISSIONS_ERROR_PREPARE    => t('Error prepare'),
    SIMPLYTEST_SUBMISSIONS_ERROR_DOWNLOAD   => t('Error download'),
    SIMPLYTEST_SUBMISSIONS_ERROR_INSTALLING => t('Error installing'),
    SIMPLYTEST_SUBMISSIONS_ERROR_PATCHING   => t('Error patching'),
  );
  drupal_alter('simplytest_submissions_states', $states);
  return $states;
}

/**
 * Logs a submission state change to watchdog.
 *
 * @param string $id
 *  The submission id.
 * @param int $state
 *  The submissions state to set.
 */
function _simplytest_submissions_state_log($id, $state) {

  // Error state to log?
  if ($state >= SIMPLYTEST_SUBMISSIONS_ERROR_SERVER) {
    $severity = WATCHDOG_ERROR;
  }
  else {
    $severity = WATCHDOG_NOTICE;
  }

  // Log the state update.
  watchdog('simplytest_submissions', 'State of %id was set to %state.', array(
    '%id' => $id,
    '%state' => simplytest_submissions_state_to_string($state),
  ), $severity);
}

/**
 * Returns an ordered list of server id's and their full slots.
 *
 * @return array
 *  Associative array, keyed by the server id,
 *  containing the current count of filled slots.
 */
function simplytest_submission_get_full_server_slots() {
  $query = db_select('simplytest_submissions', 's');
  $query->fields('s', array('server'));
  // Active, non terminated submissions.
  $query->condition('state', SIMPLYTEST_SUBMISSIONS_TERMINATED, '<');
  // Only spawned submissions.
  $query->isNotNull('server');
  // Count occurrance of server ids.
  $query->groupBy('server');
  $query->addExpression('count(server)', 'fullslots');
  $query->orderBy('fullslots', 'ASC');
  return $query->execute()->fetchAllKeyed();
}